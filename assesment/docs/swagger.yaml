definitions:
  entity.CartResponse:
    properties:
      checkout:
        type: boolean
      id:
        type: integer
      product:
        $ref: '#/definitions/entity.Product'
      productID:
        type: integer
      quantity:
        type: integer
      user:
        $ref: '#/definitions/entity.User'
      userID:
        type: integer
    type: object
  entity.Product:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      photo:
        type: string
      price:
        type: integer
    type: object
  entity.ProductResponse:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      photo:
        type: string
      price:
        type: integer
    type: object
  entity.User:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
  entity.UserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  entity.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    type: object
host: petstore.swagger.io
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /carts:
    get:
      description: get All Carts.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CartResponse'
      summary: Get All Carts.
      tags:
      - Carts
    post:
      description: Create Cart.
      parameters:
      - description: Buat cart
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/entity.CartResponse'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.CartResponse'
      summary: Create Cart.
      tags:
      - Carts
  /products:
    get:
      description: get product.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.ProductResponse'
            type: array
      summary: Get All Product.
      tags:
      - Products
  /products/{category}:
    get:
      description: get products by category.
      parameters:
      - description: product category
        in: path
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get Products by category
      tags:
      - Products
  /products/{id}:
    delete:
      description: Delete Product by id.
      parameters:
      - description: product id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete Product
      tags:
      - Products
    get:
      description: get User by id.
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ProductResponse'
      summary: Get User By Id
      tags:
      - Products
  /products/{priceMin}/{priceMax}:
    get:
      description: Get Products by price.
      parameters:
      - description: product price
        in: path
        name: priceMin,priceMax
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get Products by price
      tags:
      - Products
  /products/create:
    post:
      description: create product.
      parameters:
      - in: formData
        name: category
        type: string
      - in: formData
        name: description
        type: string
      - in: formData
        name: name
        type: string
      - in: formData
        name: photo
        type: string
      - in: formData
        name: price
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.ProductResponse'
      summary: Create Product.
      tags:
      - Products
  /products/update:
    post:
      description: Update product.
      parameters:
      - in: formData
        name: category
        type: string
      - in: formData
        name: description
        type: string
      - in: formData
        name: name
        type: string
      - in: formData
        name: photo
        type: string
      - in: formData
        name: price
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.ProductResponse'
      summary: Update Product.
      tags:
      - Products
  /users:
    get:
      description: get user.
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/entity.UserResponse'
            type: array
      summary: Get All User.
      tags:
      - Users
  /users/{id}:
    get:
      description: get user by id.
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserResponse'
      summary: Get User By Id
      tags:
      - Users
  /users/create:
    post:
      description: create user.
      parameters:
      - description: silahkan daftarkan data user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/entity.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.UserResponse'
      summary: Create User.
      tags:
      - Users
  /users/delete/{id}:
    delete:
      description: Delete User by id.
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Delete User
      tags:
      - Users
  /users/update/{id}:
    put:
      description: update users.
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: string
      - description: silahkan ubah data user
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/entity.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserResponse'
      summary: Update Users
      tags:
      - Users
swagger: "2.0"
